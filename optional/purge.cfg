#####################################################################
#   Purge
#####################################################################
# Adapted from KAMP https://github.com/kyleisah/Klipper-Adaptive-Meshing-Purging
[gcode_macro LINE_PURGE]
description: Purge near printed parts
gcode:
    {% if not "_CONFIG_PURGE" in printer["gcode"].commands %}
        _LOG LVL=WARN NAME=opt.LINE_PURGE MSG="Missing _CONFIG_PURGE"
    {% elif not printer["gcode_macro _CONFIG_PURGE"].enabled %}
        _LOG NAME=opt.LINE_PURGE MSG="Purge is not enabled!"
    {% elif printer.configfile.settings.extruder.max_extrude_cross_section | float < 5 %}
        _LOG LVL=DEBUG NAME=opt.LINE_PURGE MSG="[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped."
    {% else %}
        {% set purge = printer["gcode_macro _CONFIG_PURGE"] %}
        _SET_STATUS STATUS=purging

        {% set purge_move_speed = (purge.rate / 5.0) * 60 | float %}

        {% set PURGE_HEIGHT = purge.height %}
        {% if not printer["gcode"].commands["_CONFIG_NOZZLES"] %}
            {% if purge.use_nozzle and printer["gcode_macro _CONFIG_NOZZLES"].enabled %}
                {% set PURGE_HEIGHT = printer["gcode_macro _CONFIG_BASE"].nozzle %}
            {% endif %}
        {% endif %}

        # Calculate purge origins and centers from objects
        {% set all_points = printer.exclude_object.objects | map(attribute='polygon') | sum(start=[]) %}    # Get all object points
        {% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}                          # Object x min
        {% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}                          # Object x max
        {% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}                          # Object y min
        {% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}                          # Object y max

        {% set purge_x_origin = ([purge_x_min - purge.margin, 0] | max) %}                                  # Add margin to x min, compare to 0, and choose the larger
        {% set purge_y_origin = ([purge_y_min - purge.margin, 0] | max) %}                                  # Add margin to y min, compare to 0, and choose the larger

        {% if purge_y_origin > 0 %}
            {% set P_AXIS = "X" %}
            {% set M_AXIS = "Y" %}
            {% set P_START = ([((purge_x_max + purge_x_min) / 2) - (purge.amount / 2), 0] | max) %}
            {% set M_START = purge_y_origin %}
        {% else %}
            {% set P_AXIS = "Y" %}
            {% set M_AXIS = "X" %}
            {% set P_START = ([((purge_y_max + purge_y_min) / 2) - (purge.amount / 2), 0] | max) %}
            {% set M_START = purge_x_origin %}
        {% endif %}

        _LOG LVL=INFO NAME=opt.LINE_PURGE MSG="Purge starting at ({P_AXIS}{P_START}, {M_AXIS}{M_START}, Z{PURGE_HEIGHT}) and purging {purge.amount}mm of filament at {purge_move_speed}"

        _POSITION_ABSOLUTE
        _CLIENT_RETRACT
        G0 {P_AXIS}{P_START} {M_AXIS}{M_START} F{purge.speed_xy * 60} # move to purge start
        G0 Z{PURGE_HEIGHT} F{purge.speed_z * 60} # Drop Z
        _CLIENT_EXTRUDE

        _EXTRUDE_RELATIVE
        G0 E{purge.prime} F{purge.prime_speed} # Prime
        G0 {P_AXIS}{P_START + purge.amount} E{purge.amount} F{purge_move_speed * 60} # Purge

        G0 Z{purge.hop} F{purge.speed_z * 60} # Z hop
        G0 {P_AXIS}{P_START + (purge.amount/2)} F{purge.speed_xy*60}                     # Move away from purge
    {% endif %}
