#####################################################################
#   Purge
#####################################################################
# Adapted from KAMP https://github.com/kyleisah/Klipper-Adaptive-Meshing-Purging
[gcode_macro LINE_PURGE]
description: A purge macro that adapts to be near your actual printed objects
variable_eject_objects: {}
gcode:
    {% set CFG = printer["gcode_macro _CONFIG"] %}

    {% if not CFG.purge %}
        _LOG NAME="PURGE" MSG="Skipping purge"
    {% else %}
        # Get relevant printer params
        {% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}
    
        # Calculate purge origins and centers from objects
        {% set all_points = printer.exclude_object.objects | map(attribute='polygon') | sum(start=[]) %}    # Get all object points
        {% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}                          # Object x min
        {% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}                          # Object x max
        {% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}                          # Object y min
        {% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}                          # Object y max
    
        {% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (CFG.purge_amount / 2), 0] | max) %}      # Create center point of purge line relative to print on X axis
        {% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (CFG.purge_amount / 2), 0] | max) %}      # Create center point of purge line relative to print on Y axis
    
        {% set purge_x_origin = ([purge_x_min - CFG.purge_margin, 0] | max) %}                                  # Add margin to x min, compare to 0, and choose the larger
        {% set purge_y_origin = ([purge_y_min - CFG.purge_margin, 0] | max) %}                                  # Add margin to y min, compare to 0, and choose the larger
    
        # Calculate purge speed
        {% set purge_move_speed = (CFG.purge_rate / 5.0) * 60 | float %}

        {% set PURGE_HEIGHT = CFG.purge_height %}
        {% if CFG.purge_use_nozzle and CFG.nozzles["Enabled"] %}
            {% set PURGE_HEIGHT = CFG.printer_nozzle %}
        {% endif %}
    
        {% if cross_section < 5 %}
            _LOG NAME="PURGE" LVL=DEBUG MSG="[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped."
        {% else %}
            {% if purge_y_origin > 0 %}
                _LOG NAME="PURGE" LVL=INFO MSG="Purge starting at ({purge_x_center}, {purge_y_origin}, {PURGE_HEIGHT}) and purging {CFG.purge_amount}mm of filament at {purge_move_speed}" 
            {% else %}
                _LOG NAME="PURGE" LVL=INFO MSG="Purge starting at ({purge_x_origin}, {purge_y_center}, {PURGE_HEIGHT}) and purging {CFG.purge_amount}mm of filament at {purge_move_speed}"
            {% endif %}
            # Purge
            _CLIENT_RETRACT
            _POSITION_ABSOLUTE
            {% if purge_y_origin > 0 %}   # If there's room on Y, purge along X axis in front of print area
                G0 X{purge_x_center} Y{purge_y_origin} F{CFG.purge_speed_xy}
                G0 Z{PURGE_HEIGHT} F{CFG.purge_speed_z}
                _CLIENT_EXTRUDE
    
                _EXTRUDE_RELATIVE # Purge!
                _EXTRUDER_ZERO
                G0 E{CFG.purge_prime} F{CFG.purge_prime_speed}
                G0 X{purge_x_center + CFG.purge_amount} E{CFG.purge_amount} F{purge_move_speed}     # Purge line
                _EXTRUDER_ZERO
    
                _EXTRUDE_ABSOLUTE
                _CLEAR_BUFFER
                G0 Z{CFG.purge_hop} F{CFG.purge_speed_z}                                            # Z hop
                #G0 X{purge_x_center + CFG.purge_amount*2} F{CFG.purge_speed_xy}                     # Move away from purge
            {% else %}                    # If there's room on X, purge along Y axis to the left of print area
                G0 X{purge_x_origin} Y{purge_y_center} F{CFG.purge_speed_xy}                        # Move to purge position
                G0 Z{PURGE_HEIGHT} F{CFG.purge_speed_z}                                             # Move to purge Z height
                _CLIENT_EXTRUDE
    
                _EXTRUDE_RELATIVE # Purge!
                _EXTRUDER_ZERO
                G0 E{CFG.purge_prime} F{CFG.purge_prime_speed}
                G0 Y{purge_y_center + CFG.purge_amount} E{CFG.purge_amount} F{purge_move_speed}     # Purge line
                _EXTRUDER_ZERO
    
                _EXTRUDE_ABSOLUTE
                _CLEAR_BUFFER
                G0 Z{CFG.purge_hop} F{CFG.purge_speed_z}                                           # Z hop
                #G0 Y{purge_y_center + CFG.purge_amount*2} F{CFG.purge_speed_xy}                    # Move away from purge
            {% endif %}
            _CLIENT_EXTRUDE
        {% endif %}
    {% endif %}
