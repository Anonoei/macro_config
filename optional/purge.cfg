#####################################################################
#   Purge
#####################################################################
# Adapted from KAMP https://github.com/kyleisah/Klipper-Adaptive-Meshing-Purging
[gcode_macro LINE_PURGE]
description: A purge macro that adapts to be near your actual printed objects
variable_eject_objects: {}
gcode:
    {% if not printer["gcode"].commands["_CONFIG_PURGE"] %}
        _LOG NAME=opt.LINE_PURGE MSG="Skipping purge"
    {% else %}
        {% set purge = printer["gcode_mcaro _CONFIG_PURGE"] %}
        _SET_STATUS STATUS=purging

        # Get relevant printer params
        {% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}

        # Calculate purge origins and centers from objects
        {% set all_points = printer.exclude_object.objects | map(attribute='polygon') | sum(start=[]) %}    # Get all object points
        {% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}                          # Object x min
        {% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}                          # Object x max
        {% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}                          # Object y min
        {% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}                          # Object y max

        {% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge.amount / 2), 0] | max) %}      # Create center point of purge line relative to print on X axis
        {% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge.amount / 2), 0] | max) %}      # Create center point of purge line relative to print on Y axis

        {% set purge_x_origin = ([purge_x_min - purge.margin, 0] | max) %}                                  # Add margin to x min, compare to 0, and choose the larger
        {% set purge_y_origin = ([purge_y_min - purge.margin, 0] | max) %}                                  # Add margin to y min, compare to 0, and choose the larger

        # Calculate purge speed
        {% set purge_move_speed = (purge.rate / 5.0) * 60 | float %}

        {% set PURGE_HEIGHT = purge.height %}
        {% if not printer["gcode"].commands["_CONFIG_NOZZLES"] %}
            {% if purge.use_nozzle and printer["gcode_mcaro _CONFIG_NOZZLES"].enabled %}
                {% set PURGE_HEIGHT = printer["gcode_mcaro _CONFIG_BASE"].nozzle %}
            {% endif %}
        {% endif %}

        {% if cross_section < 5 %}
            _LOG LVL=DEBUG NAME=opt.LINE_PURGE MSG="[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped."
        {% else %}
            {% if purge_y_origin > 0 %}
                _LOG LVL=INFO NAME=opt.LINE_PURGE MSG="Purge starting at ({purge_x_center}, {purge_y_origin}, {PURGE_HEIGHT}) and purging {purge.amount}mm of filament at {purge_move_speed}"
            {% else %}
                _LOG LVL=INFO NAME=opt.LINE_PURGE MSG="Purge starting at ({purge_x_origin}, {purge_y_center}, {PURGE_HEIGHT}) and purging {purge.amount}mm of filament at {purge_move_speed}"
            {% endif %}
            # Purge
            _CLIENT_RETRACT
            _POSITION_ABSOLUTE
            {% if purge_y_origin > 0 %}   # If there's room on Y, purge along X axis in front of print area
                G0 X{purge_x_center} Y{purge_y_origin} F{purge.speed_xy}
                G0 Z{PURGE_HEIGHT} F{purge.speed_z}
                _CLIENT_EXTRUDE

                _EXTRUDE_RELATIVE # Purge!
                _EXTRUDER_ZERO
                G0 E{purge.prime} F{purge.prime_speed}
                G0 X{purge_x_center + purge.amount} E{purge.amount} F{purge_move_speed}     # Purge line
                _EXTRUDER_ZERO

                _EXTRUDE_ABSOLUTE
                _CLEAR_BUFFER
                G0 Z{purge.hop} F{purge.speed_z}                                            # Z hop
                #G0 X{purge_x_center + purge.amount*2} F{purge.speed_xy}                     # Move away from purge
            {% else %}                    # If there's room on X, purge along Y axis to the left of print area
                G0 X{purge_x_origin} Y{purge_y_center} F{purge.speed_xy}                        # Move to purge position
                G0 Z{PURGE_HEIGHT} F{purge.speed_z}                                             # Move to purge Z height
                _CLIENT_EXTRUDE

                _EXTRUDE_RELATIVE # Purge!
                _EXTRUDER_ZERO
                G0 E{purge.prime} F{purge.prime_speed}
                G0 Y{purge_y_center + purge.amount} E{purge.amount} F{purge_move_speed}     # Purge line
                _EXTRUDER_ZERO

                _EXTRUDE_ABSOLUTE
                _CLEAR_BUFFER
                G0 Z{purge.hop} F{purge.speed_z}                                           # Z hop
                #G0 Y{purge_y_center + purge.amount*2} F{purge.speed_xy}                    # Move away from purge
            {% endif %}
            _CLIENT_EXTRUDE
        {% endif %}
    {% endif %}
