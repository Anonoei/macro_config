#####################################################################
#   Print Start
#####################################################################
## -- Configuration -- ##
# variable_print_start_z       : 10
# variable_print_start_speed   : 100
# variable_print_prime         : 15
# variable_print_retract       : 10

# variable_print_park          : "FRONT"
# variable_print_mesh          : True
# variable_print_purge         : True
# variable_print_eject         : False
## -- Configuration -- ##

[gcode_macro PRINT_START]
description: Called by slicer before starting print
variable_bed: 0
variable_hotend: 0
variable_chamber: -1
variable_tool: {'MAT': -1, 'BND': -1, 'COL': -1}
gcode:
    {% set hardware = printer["gcode_macro _CONFIG_HARDWARE"] %}
    {% set print = printer["gcode_macro _CONFIG_PRINT"] %}

    {% set SETTINGS = printer["gcode_macro PRINT_START"] %}

    OFF_IN T=0                        ; cancel off timer
    {% if printer["gcode"].commands["MCUFANS"] %}
        MCUFANS TARGET=PRINT
    {% endif %}
    _SYNC_SETTINGS

    {% if printer.extruder.temperature + 5 < SETTINGS.hotend %}
        PRINT_PREPARE
    {% else %}
        _SET_BED TEMP={SETTINGS.bed} WAIT=1
        _SET_HOTEND TEMP={SETTINGS.hotend} WAIT=1
    {% endif %}

    _CLEAR_BUFFER
    _PLAY_TUNE TUNE=PRINT_START

    _EXTRUDE_RELATIVE
    G0 E{print.prime} F150
    _SET_STATUS STATUS=printing

    {% if printer["gcode"].commands["NOZZLE_WIPE"] %}
        NOZZLE_WIPE                      ; Wipe the nozzle
    {% endif %}

    _CLEAR_BUFFER
    {% if printer["gcode"].commands["EJECT_PARTS"] and print.eject %}
        SET_GCODE_VARIABLE MACRO=EJECT_PARTS VARIABLE=eject_objects VALUE={printer.exclude_objects.objects}
    {% endif %}

    _EXTRUDE_RELATIVE
    _POSITION_ABSOLUTE

    {% if printer["gcode"].commands["LINE_PURGE"] and print.purge %}
        LINE_PURGE
    {% else %}
        {% set all_points = printer.exclude_object.objects | map(attribute='polygon') | sum(start=[]) %}    # Get all object points
        {% set print_x_min = (all_points | map(attribute=0) | min | default(0)) %}                          # Object x min
        {% set print_x_max = (all_points | map(attribute=0) | max | default(0)) %}                          # Object x max
        {% set print_y_min = (all_points | map(attribute=1) | min | default(0)) %}                          # Object y min
        {% set print_y_max = (all_points | map(attribute=1) | max | default(0)) %}                          # Object y max

        {% set print_x = (print_x_max + print_x_min)/2%}
        {% set print_y = print_y_max %}
        {% set print_z = print.start_z %}

        _LOG NAME=print.PRINT_START MSG="Starting at X{print_x} Y{print_y} Z{print_z}"

        G0 X{print_x} Y{print_y} Z{print_z} F{print.start_speed * 60}
    {% endif %}
    _EXTRUDE_RELATIVE
    _POSITION_ABSOLUTE
    SET_CONFIG SECT=BASE NAME=bed_clear TO={False} SAVE=True

[gcode_macro PRINT_PREPARE]
description: Prepare to print
variable_heatsoak: 0
gcode:
    {% set SETTINGS = printer["gcode_macro PRINT_START"] %}

    {% set base = printer["gcode_macro _CONFIG_BASE"] %}
    {% set hardware = printer["gcode_macro _CONFIG_HARDWARE"] %}
    {% set print = printer["gcode_macro _CONFIG_PRINT"] %}
    {% set mesh = printer["gcode_macro _CONFIG_MESH"]%}

    {% set svv = printer.save_variables.variables %}

    {% set CURRENT_HOTEND_TEMP = printer.extruder.temperature|float %}
    {% set CURRENT_BED_TEMP = printer.heater_bed.temperature|float %}

    {% set FILAMENT = base.filament[0] %}
    {% set DIAMETER = base.nozzle|float %}
    {% set SURFACE = base.surface %}

    _LOG NAME=print.PRINT_PREPARE MSG="Preparing for print!: [{SURFACE}-{DIAMETER}-{FILAMENT}: BED: {SETTINGS.bed}C, HE: {SETTINGS.hotend}C, CH: {SETTINGS.chamber}C, PURGE: {SETTINGS.PURGING}" DISPLAY=1 NOTIFY=1
    BED_MESH_CLEAR

    # --- Heat the bed, if it's not heated, soak it
    _SET_BED TEMP={SETTINGS.bed} WAIT=0 # Start heating bed

    PARK POS="CENTER"

    {% if hardware.has_chamber %}
        {% if not print.quick and heatsoak == 1 %}
            _LOG NAME=print.PRINT_PREPARE MSG="Bed at {CURRENT_BED_TEMP}. Heat soaking bed..." DISPLAY=1
            PARK POS="CENTER"
            STEPPERS_OFF
            SOAK_BED TEMP={SETTINGS.bed} DURATION=15
        {% else %}
            _LOG NAME=print.PRINT_PREPARE MSG="Bed pre-heated, setting bed to {SETTINGS.bed}C..." DISPLAY=1
        {% endif %}
    {% endif %}
    _CLEAR_BUFFER

    _CG28

    {% if printer["gcode"].commands["NOZZLE_SCRAPE"] %}
        NOZZLE_SCRAPE
    {% endif %}
    {% if printer["gcode"].commands["NOZZLE_WIPE"] %}
        NOZZLE_WIPE
    {% endif %}
    _CLEAR_BUFFER

    _LOG NAME=print.PRINT_PREPARE MSG="Wating for bed to reach {SETTINGS.bed}C..." DISPLAY=1
    _SET_BED TEMP={SETTINGS.bed} WAIT=1 # Ensure bed has reached temperature

    # PROBE_PRE BACK=0
    # PROBE_LOCK

    {% if not print.quick|default(False) %}
        _LOG NAME=print.PRINT_PREPARE MSG="Homing Z..."
        G28 Z0
        _LOG NAME=print.PRINT_PREPARE MSG="Leveling..."
        LEVEL
    {% endif %}
    _CLEAR_BUFFER

    {% if print.mesh %}
        {% if printer["gcode"].commands["ADAPTIVE_BED_MESH"] and mesh.adaptive %}
            _LOG NAME=print.PRINT_PREPARE MSG="Starting adaptive bed mesh"
            ADAPTIVE_BED_MESH
        {% elif mesh.enabled and mesh.name %}
            _LOG NAME=print.PRINT_PREPARE MSG="Loading bed mesh '{mesh.name}'"
            BED_MESH_PROFILE LOAD={mesh.name}
        {% endif %}
    {% endif %}
    _CLEAR_BUFFER

    _LOG NAME=print.PRINT_PREPARE MSG="Homing Z..."
    G28 Z0                             ; Re-home z

    # PROBE_UNLOCK
    PROBE_POS BACK=0

    PARK POS="PRINT"

    _LOG NAME=print.PRINT_PREPARE MSG="Waiting for hotend to reach {SETTINGS.hotend}C..." DISPLAY=1
    _SET_HOTEND TEMP={SETTINGS.hotend} WAIT=1
    _LOG NAME=print.PRINT_PREPARE MSG="Waiting for additional {print.wait|int / 1000}s" DISPLAY=1
    _PAUSE T={print.wait|default(500)|int }

    {% if hardware.has_mmu %}
        {% if not SETTINGS.tool.MAT == -1 %}
            {% if printer["gcode_macro SET_TOOL"].last_tool != -1 %}
                {% set FILAMENT = svv.mmu_state_gate_material[printer["gcode_macro SET_TOOL"].last_tool] %}
            {% endif %}
            _LOG NAME=print.PRINT_PREPARE MSG="Changing tool..." DISPLAY=1
            SET_TOOL MATERIAL={SETTINGS.tool.MAT} BRAND={SETTINGS.tool.BND} COLOR={SETTINGS.tool.COL}
        {% endif %}
    {% endif %}
    _CLEAR_BUFFER

[gcode_macro PRE_PRINT]
description: Called by slicer before calling PRINT_START
gcode:
    {% set hardware = printer["gcode_macro _CONFIG_HARDWARE"] %}

    {% set BED_TEMP = params.BED_TEMP|float %}
    {% set HOTEND_TEMP = params.HOTEND_TEMP|float %}
    {% set CHAMBER_TEMP = params.CHAMBER_TEMP|default(0)|float %}
    #{% set PURGING = params.PURGING|default(1) %}

    {% set LAYERS = params.LAYERS|default(-1)|int %}
    {% set LAYER_HEIGHT = params.LAYER_HEIGHT|default(-1)|float %}

    FORCE_CLEAR NAME="PRE_PRINT"

    {% if not LAYERS == -1 %}
        SET_PRINT_STATS_INFO TOTAL_LAYER={LAYERS}
    {% endif %}
    SET_GCODE_VARIABLE MACRO=_LAYER_STATUS VARIABLE=layer_height VALUE={LAYER_HEIGHT}
    _CLEAR_BUFFER

    {% if hardware.has_mmu %}
        {% set TOOL_MACRO = params.TOOL_MACRO|default("NONE")|string %}

        {% set TOOL_MAT = -1 %}
        {% set TOOL_BND = -1 %}
        {% set TOOL_COL = -1 %}

        {% if TOOL_MACRO != "NONE" %}
            {% set TOOL_MACRO = TOOL_MACRO.split(' ') %}
            {% if TOOL_MACRO|length >= 2 %}
                {% set TOOL_MAT = TOOL_MACRO[1].split("=")[-1] %}
            {% endif %}
            {% if TOOL_MACRO|length >= 3 %}
                {% set TOOL_BND = TOOL_MACRO[2].split("=")[-1]%}
            {% endif %}
            {% if TOOL_MACRO|length >= 4 %}
                {% set TOOL_COL = TOOL_MACRO[3].split("=")[-1] %}
            {% endif %}
        {% endif %}

        VERIFY_TOOL MATERIAL={TOOL_MAT} BRAND={TOOL_BND} COLOR={TOOL_COL} # Verify the filament is available
        _LOG NAME=print.PRE_PRINT MSG="Using MMU with {TOOL_MAT} {TOOL_BND} {TOOL_COL}"

        {% set TOOL = {"MAT": TOOL_MAT, "BND": TOOL_BND, "COL": TOOL_COL} %}
        SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=tool VALUE="{TOOL | pprint | replace("\n", "") | replace("\"", "\\\"")}"
    {% endif %}
    _CLEAR_BUFFER

    {% if hardware.has_chamber %}
        {% set HEATSOAK = 0 %}
        {% set CURRENT_BED_TEMP = printer.heater_bed.temperature|float %}
        {% if CURRENT_BED_TEMP + 30 < BED_TEMP %}
            _LOG NAME=print.PRE_PRINT MSG="Bed at {CURRENT_BED_TEMP}. Setting heatsoak to true" DISPLAY=1
            {% set HEATSOAK = 1 %}
        {% else %}
            _LOG NAME=print.PRE_PRINT MSG="Bed pre-heated, setting bed to {BED_TEMP}C..." DISPLAY=1
        {% endif %}
        SET_GCODE_VARIABLE MACRO=PRINT_PREPARE VARIABLE=heatsoak VALUE={HEATSOAK}
    {% endif %}
    _CLEAR_BUFFER

    _LOG NAME=print.PRE_PRINT MSG="Setting pre-print values: [BED: {BED_TEMP}C, HE: {HOTEND_TEMP}C, CH: {CHAMBER_TEMP}C, PURGE: {PURGING}" DISPLAY=1

    _SET_BED TEMP={BED_TEMP} WAIT=0 # Set bed temp
    _SET_HOTEND TEMP={HOTEND_TEMP-50} WAIT=0 # Set hotend temp

    SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=bed VALUE={BED_TEMP}
    SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=hotend VALUE={HOTEND_TEMP}
    SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=chamber VALUE={CHAMBER_TEMP}

    _CG28
