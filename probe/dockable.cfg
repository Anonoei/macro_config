#####################################################################
#   probe.dockable
#####################################################################
# Adapted from Klicky-Probe macros
## https://github.com/jlas1/Klicky-Probe/tree/main/Klipper_macros

# # -- Configuration -- ##
# variable_probe_dock_pos: 67.5, 300, 0

# variable_approach_pos: 67.5, 250, 0
# variable_detach_pos: 120, 300, 0

# variable_travel_speed: 1000
# variable_attach_speed: 50
# variable_detach_speed: 50

# #variable_extract_pos:
# #variable_probe_insert_pos:
# # -- Configuration -- ##

[gcode_macro _PROBE_STATUS]
description: Probe status variables
variable_probe_name     : "DOCKABLE"
variable_probe_attached : False
variable_probe_state    : False
variable_probe_lock     : False
gcode:
    _LOG NAME=probe.dockable MSG="attached: {probe_attached}"
    _LOG NAME=probe.dockable MSG="state: {probe_attached}"
    _LOG NAME=probe.dockable MSG="lock: {probe_lock}"
    _LOG NAME=probe.dockable MSG="last_query: {printer.probe.last_query}"

[gcode_macro _PROBE_CHECK]
gcode:
    {% set query_probe_triggered = printer.probe.last_query %}
    {% set action  = params.ACTION|default('') %}

    # If triggered, probe is not attached
    {% if query_probe_triggered %}
        _LOG LVL=DEBUG NAME=probe.dockable.PROBE_CHECK MSG="Probe docked"
        SET_GCODE_VARIABLE MACRO=_PROBE_STATUS VARIABLE=probe_attached VALUE={ False }
    {% else %}
         _LOG LVL=DEBUG NAME=probe.dockable.PROBE_CHECK MSG="Probe attached"
        SET_GCODE_VARIABLE MACRO=_PROBE_STATUS VARIABLE=probe_attached VALUE={ True }
    {% endif %}

    {% if action == 'query' %}
        SET_GCODE_VARIABLE MACRO=_PROBE_STATUS VARIABLE=probe_state VALUE={ query_probe_triggered }
    {% endif %}

    {% if not query_probe_triggered and action == 'dock' %}
        _LOG LVL=ERROR NAME=probe.dockable.PROBE_CHECK MSG="Probe dock failed!"
    {% endif %}

    {% if query_probe_triggered and action == 'attach' %}
        _LOG LVL=ERROR NAME=probe.dockable.PROBE_CHECK MSG="Probe attach failed!"
    {% endif %}

[gcode_macro _PROBE_LOCK]
description: Lock probe
gcode:
    {% set state = params.LOCK|default(0)|int %}

    {% if state == 1 %}
        _LOG NAME=probe.dockable.PROBE_LOCK MSG="Probe locked"
        SET_GCODE_VARIABLE MACRO=_PROBE_STATUS VARIABLE=probe_lock VALUE={ True }
    {% elif state == 0 %}
        _LOG NAME=probe.dockable.PROBE_LOCK MSG="Probe unlocked"
        SET_GCODE_VARIABLE MACRO=_PROBE_STATUS VARIABLE=probe_lock VALUE={ False }
    {% else %}
        _LOG NAME=probe.dockable.PROBE_LOCK LVL=ERROR MSG="Unknown lock state: {state}"
    {% endif %}

[gcode_macro _PROBE_BEFORE_MOVE]
gcode:
    {% set homing = printer["gcode_macro _CONFIG_HOMING"] %}

    _MACRO_ENTRY NAME=_PROBE_BEFORE_MOVE

    {% if not 'xy' in printer.toolhead.homed_axes %}
        _LOG LVL=ERROR NAME=probe.dockable MSG="X and Y must be homed first!"
    {% endif %}

    {% if not 'z' in printer.toolhead.homed_axes %}
        _LOG LVL=TRACE NAME=probe.dockable MSG="Setting Z=0"
        SET_KINEMATIC_POSITION Z={homing.safety_height - homing.z_hop} # Manually set Z
        _POSITION_RELATIVE
        G0 Z{homing.z_hop} F{homing.safety_speed * 60}
        _POSITION_ABSOLUTE
    {% elif printer.gcode_move.gcode_position.z < homing.safety_height %}
        G0 Z{homing.safety_height} F{homing.safety_speed * 60}
    {% endif %}

    _MACRO_EXIT NAME=_PROBE_BEFORE_MOVE

[gcode_macro _PROBE_AFTER_MOVE]
gcode:
    {% set homing = printer["gcode_macro _CONFIG_HOMING"] %}

    _MACRO_ENTRY NAME=_PROBE_AFTER_MOVE
    {% if printer.gcode_move.gcode_position.z < homing.safety_height %}
        _POSITION_RELATIVE
        G0 Z{homing.z_hop} F{homing.safety_speed * 60} # Post z-home z-hop
        _POSITION_ABSOLUTE
    {% endif %}
    _MACRO_EXIT NAME=_PROBE_AFTER_MOVE

[gcode_macro _PROBE_MOVE_WRAP]
description: Wrapper to reduce lines
gcode:
    {% set homing = printer["gcode_macro _CONFIG_HOMING"] %}
    {% set probe = printer["gcode_macro _CONFIG_PROBE"] %}

    {% set POS_DOCK = probe.dock_pos %}

    {% set POS_APPROACH = probe.approach_pos %}
    {% set POS_DETACH = probe.detach_pos %}

    {% set POS_EXTRACT = probe.extract_pos|default(POS_APPROACH) %}
    {% set POS_INSERT = probe.insert_pos|default(POS_DETACH) %}

    {% set NAME = params.POS|string|lower %}

    {% if NAME == "approach" %}
        {% set POS = POS_APPROACH %}
    {% elif NAME == "dock" %}
        {% set POS = POS_DOCK %}
    {% elif NAME == "detach" %}
        {% set POS = POS_DETACH %}
    {% elif NAME == "extract" %}
        {% set POS = POS_EXTRACT %}
    {% elif NAME == "insert" %}
        {% set POS = POS_INSERT %}
    {% else %}
        _LOG LVL=ERROR NAME="probe.dockable._PROBE_MOVE_WRAP" MSG="Unknow pos {NAME}"
    {% endif %}

    {% set NAME = params.NAME|string %}
    {% set SPEED = params.SPEED|float %}

    {% set X = POS[0] %}
    {% set Y = POS[1] %}
    {% if POS|length == 3 %}
        {% set Z = POS[2] %}
    {% else %}
        {% set Z = 0 %}
    {% endif %}

    _LOG LVL=TRACE NAME="probe.dockable.{NAME}" MSG="Moving to X{X} Y{Y} Z{Z} F{SPEED}"
    {% if Z %}
        G0 X{X} Y{Y} Z{Z} F{SPEED}
    {% else %}
        G0 X{X} Y{Y} F{SPEED}
    {% endif %}

[gcode_macro _PROBE_MOVE_TO_APPROACH]
description: Move to approach position
gcode:
    {% set SPEED = printer["gcode_macro _CONFIG_PROBE"].travel_speed * 60 %}

    _PROBE_MOVE_WRAP  POS="approach" SPEED={SPEED}

[gcode_macro _PROBE_MOVE_TO_DOCK]
description: Move to dock
gcode:
    {% set SPEED = printer["gcode_macro _CONFIG_PROBE"].attach_speed * 60 %}

    _PROBE_MOVE_WRAP POS="dock" SPEED={SPEED}

[gcode_macro _PROBE_MOVE_TO_EXTRACT]
description: Move to extract position, attaching probe
gcode:
    {% set SPEED = printer["gcode_macro _CONFIG_PROBE"].attach_speed * 60 %}
    _PROBE_MOVE_WRAP POS="extract" SPEED={SPEED}

[gcode_macro _PROBE_MOVE_TO_INSERT]
description: Move to insert position, placing probe in dock
gcode:
    {% set SPEED = printer["gcode_macro _CONFIG_PROBE"].attach_speed * 60 %}
    _PROBE_MOVE_WRAP POS="insert" SPEED={SPEED}

[gcode_macro _PROBE_MOVE_TO_DETACH]
description: Move leaving probe in dock
gcode:
    {% set SPEED = printer["gcode_macro _CONFIG_PROBE"].detach_speed * 60 %}
    _PROBE_MOVE_WRAP NAME="_PROBE_MOVE_TO_DETACH" POS="detach" SPEED={SPEED}

[gcode_macro _PROBE_PRE]
description: Attaches dockable probe
gcode:
    {% set dockable = printer["gcode_macro _PROBE_STATUS"] %}

    {% if not dockable.probe_attached and not dockable.probe_lock %}
        _PROBE_BEFORE_MOVE

        _MACRO_ENTRY NAME=_PROBE_PRE_INT
        _POSITION_ABSOLUTE

        _PROBE_MOVE_TO_APPROACH
        _PROBE_MOVE_TO_DOCK
        _PROBE_MOVE_TO_EXTRACT
        _PROBE_MOVE_TO_APPROACH

        _PROBE_AFTER_MOVE
        _CLEAR_BUFFER

        PROBE_CHECK ACTION=attach
        _MACRO_EXIT NAME=_PROBE_PRE_INT
    {% elif dockable.probe_lock %}
        _LOG LVL=DEBUG NAME=probe.dockable.PROBE_PRE MSG="Probe is locked!"
        PROBE_CHECK ACTION=query
    {% else %}
        _LOG LVL=DEBUG NAME=probe.dockable.PROBE_PRE MSG="Probe is already attached"
        PROBE_CHECK ACTION=query
    {% endif %}

[gcode_macro _PROBE_POS]
description: Docks dockable probe
gcode:
    {% set dockable = printer["gcode_macro _PROBE_STATUS"] %}

    {% if dockable.probe_attached and not dockable.probe_lock %}
        _PROBE_BEFORE_MOVE

        _MACRO_ENTRY NAME=_PROBE_POS_INT
        _POSITION_ABSOLUTE

        _PROBE_MOVE_TO_APPROACH
        _PROBE_MOVE_TO_DOCK
        _PROBE_MOVE_TO_INSERT
        _PROBE_MOVE_TO_DETACH

        _PROBE_AFTER_MOVE
        _CLEAR_BUFFER

        PROBE_CHECK ACTION=dock
        _MACRO_EXIT NAME=_PROBE_POS_INT
    {% elif dockable.probe_lock %}
        _LOG LVL=DEBUG NAME=probe.dockable.PROBE_POS MSG="Probe is locked!"
        PROBE_CHECK ACTION=query
    {% else %}
        _LOG LVL=DEBUG NAME=probe.dockable.PROBE_POS MSG="Probe is already docked"
        PROBE_CHECK ACTION=query
    {% endif %}
