[gcode_macro SET_SURFACE]
description: Set probe offset based on build surface
gcode:
    {% set MATERIAL = params.MATERIAL|default(printer["gcode_macro _CONFIG"].printer_surface)|string|upper %}

    {% set CFG     = printer["gcode_macro _CONFIG"] %}
    {% set SURFACE = CFG.surfaces %}

    _LOG NAME="sync.SET_SURFACE" LVL=TRACE MSG="Attemping to set surface to '{MATERIAL}'..."

    {% if SURFACE['Enabled'] %}
        {% if SURFACE[MATERIAL] %}
            SET_GCODE_VARIABLE MACRO=_CONFIG VARIABLE=printer_surface VALUE='"{MATERIAL}"'
            SAVE_VARIABLE VARIABLE=printer_surface VALUE='"{MATERIAL}"'

            _LOG NAME="sync.SET_SURFACE" MSG="Setting surface to {MATERIAL}: {SURFACE[MATERIAL]}"
            {% set BASE_Z = CFG.printer_probe %}
            {% if CFG.autotap and "xyz" in printer.toolhead.homed_axes %}
                {% if CFG.autotap_set == 0 %}
                    CALC_Z
                    {% set BASE_Z = printer['gcode_move'].homing_origin.z %}
                    SET_CONFIG NAME=printer_probe TO={BASE_Z}
                    SET_CONFIG NAME=autotap_set TO={BASE_Z}
                {% else %}
                    {% set BASE_Z = CFG.autotap_set %}
                {% endif %}
            {% endif %}
            SET_GCODE_OFFSET Z={BASE_Z + SURFACE[MATERIAL]['Height']}
        {% else %}
            SET_GCODE_OFFSET Z={CFG.printer_probe}
            _LOG LVL=ERROR NAME=base.sync.SET_SURFACE MSG="Unknown surface material '{MATERIAL}'!"
        {% endif %}
    {% endif %}

[gcode_macro SET_FILAMENT]
description: Change defaults based on filament type
gcode:
    {% set MATERIAL = params.MATERIAL|upper|string %}                   ; Get material type from slicer
    {% set BRAND    = params.BRAND|upper|string %}
    {% set COLOR    = params.COLOR|upper|string %}

    {% set CFG      = printer["gcode_macro _CONFIG"] %}
    {% set FILAMENT = CFG.filaments %}

    _LOG NAME="sync.SET_FILAMENT" LVL=TRACE MSG="Attemping to set filament to '{MATERIAL}', '{BRAND}', '{COLOR}'..."

    {% if FILAMENT['Enabled'] %}
        {% if MATERIAL == "NONE" or not 'MATERIAL' in params %}
            _LOG NAME="sync.SET_FILAMENT" MSG="Setting filament to none" DISPLAY=1
            SET_GCODE_VARIABLE MACRO=_CONFIG VARIABLE=printer_filament VALUE=['"NONE"','"NONE"','"NONE"']
            SAVE_VARIABLE VARIABLE=printer_filament VALUE=['"NONE"','"NONE"','"NONE"']
            # Revert settings to default
            SET_PRESSURE_ADVANCE ADVANCE={CFG.printer_pa} SMOOTH_TIME={CFG.printer_pa_st}
            SET_RETRACTION RETRACT_LENGTH={CFG.retract_length} RETRACT_SPEED={CFG.retract_speed} UNRETRACT_LENGTH={CFG.unretract_length} UNRETRACT_SPEED={CFG.unretract_speed}
        {% else %}
            {% if FILAMENT[MATERIAL][BRAND] %}
                {% set FILAMENT = FILAMENT[MATERIAL][BRAND] %}
                _LOG NAME="filament.SET_FILAMENT" MSG="Setting filament to {MATERIAL} {BRAND} {COLOR}: {FILAMENT}"
                SET_GCODE_VARIABLE MACRO=_CONFIG VARIABLE=printer_filament VALUE=['"{MATERIAL}"','"{BRAND}"','"{COLOR}"']
                SAVE_VARIABLE VARIABLE=printer_filament VALUE=['"{MATERIAL}"','"{BRAND}"','"{COLOR}"']


                SET_PRESSURE_ADVANCE ADVANCE={FILAMENT['PA']} SMOOTH_TIME={FILAMENT['PA_ST']}
                SET_RETRACTION RETRACT_LENGTH={FILAMENT['Retract']} RETRACT_SPEED={FILAMENT['RetractSpeed']} UNRETRACT_EXTRA_LENGTH={FILAMENT['Unretract']} UNRETRACT_SPEED={FILAMENT['UnretractSpeed']}
            {% else %}
                _LOG LVL=ERROR NAME=base.sync.SET_FILAMENT MSG="Unknown filament material/brand! {MATERIAL} {BRAND}"
            {% endif %}
        {% endif %}
    {% endif %}

[gcode_macro SET_NOZZLE]
description: Change defaults based on nozzle diameter
gcode:
    {% set DIAMETER = params.DIAMETER|default(printer["gcode_macro _CONFIG"].printer_nozzle)|string %}                          ; Get nozzle diameter from slicer

    {% set CFG    = printer["gcode_macro _CONFIG"] %}
    {% set NOZZLE = CFG.nozzles %}

    _LOG NAME="sync.SET_NOZZLE" LVL=TRACE MSG="Attemping to set nozzle to '{DIAMETER}'..."
    {% if NOZZLE['Enabled'] %}
        {% if NOZZLE[DIAMETER] %}
            {% set prevNOZZLE = CFG.printer_nozzle|string %}
            {% set prevNOZZLE = NOZZLE[prevNOZZLE] %}
            {% set NOZZLE = NOZZLE[DIAMETER] %}
            {% if not NOZZLE == prevNOZZLE %}
                SET_GCODE_VARIABLE MACRO=_CONFIG VARIABLE=printer_nozzle VALUE='"{DIAMETER}"
                SAVE_VARIABLE VARIABLE=printer_nozzle VALUE='"{DIAMETER}"

                _LOG NAME="sync.SET_NOZZLE" MSG="Setting nozzle to {DIAMETER}: {NOZZLE}"
                SET_GCODE_OFFSET Z_ADJUST=-{prevNOZZLE['ZAdjust']} ; Undo previous z_offset
                SET_GCODE_OFFSET Z_ADJUST={NOZZLE['ZAdjust']} ; Adjust z_offset
            {% endif %}
        {% else %}
            _LOG LVL=ERROR NAME=base.sync.SET_NOZZLE MSG="Unknown nozzle size '{DIAMETER}'!"
        {% endif %}
    {% endif %}

[gcode_macro _SYNC_SETTINGS]
description: Sync printer settings with settings file
gcode:
    {% set STARTUP = params.STARTUP|default(False) %}

    {% set CFG = printer["gcode_macro _CONFIG"] %}
    {% set svv = printer.save_variables.variables %}

    _LOG LVL=TRACE NAME="sync._SYNC_SETTINGS" MSG="Syncing settings..."

    # Machine
    _SET_SPEED PERCENT=100
    SET_VELOCITY_LIMIT VELOCITY={CFG.printer_speed} ACCEL={CFG.printer_accel} SQUARE_CORNER_VELOCITY={CFG.printer_scv} MINIMUM_CRUISE_RATIO={CFG.printer_decel_factor}
    _LOG NAME="base.sync._SYNC_SETTINGS" MSG="Set speed factor: 100%, velocity: {CFG.printer_speed}, accel: {CFG.printer_accel}, scv: {CFG.printer_scv}"
    # Extruder
    _SET_EXTRUDE PERCENT=100
    _LOG NAME="base.sync._SYNC_SETTINGS" MSG="Set extrusion factor to 100%"
    # Saved variables
    SET_CONFIG NAME=printer_bed_clear TO={svv.printer_bed_clear|default(False)}

    {% if CFG.surfaces and CFG.surfaces['Enabled'] %}
        SET_SURFACE MATERIAL={svv.printer_surface|default("PEI_TEXTURED")|string}
    {% endif %}
    {% if CFG.nozzles and CFG.nozzles['Enabled'] %}
        SET_NOZZLE DIAMETER={svv.printer_nozzle|default("0.4")|string}
    {% endif %}

    # MMU
    {% if not CFG.printer_has_mmu %}
        {% if CFG.filaments and CFG.filaments['Enabled'] %}
            {% set FILAMENT = svv.printer_filament|default(['"ABS"','"POLYMAKER"','"BLACK"']) %}
            SET_FILAMENT MATERIAL={FILAMENT[0]} BRAND={FILAMENT[1]} COLOR={FILAMENT[2]}
        {% endif %}
    {% else %}
        {% if STARTUP %}
            MMU_SPOOLMAN REFRESH=1 FIX=1 SYNC=1
        {% endif %}
    {% endif %}
